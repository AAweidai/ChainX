[package]
name = "xrml-xbootstrap"
version = "0.4.0"
authors = ["Chainpool <http://chainx.org>"]
edition = "2018"

[dependencies]
serde = { version = "1.0", default_features = false }
serde_derive = { version = "1.0", optional = true }
parity-codec = { version = "3.2", default-features = false, features = ["derive"] }
# substrate
substrate-primitives = { git = "https://github.com/chainpool/substrate", default_features = false }
substrate-finality-grandpa-primitives = { git = "https://github.com/chainpool/substrate", default-features = false }
# substrate runtime
sr-io = { git = "https://github.com/chainpool/substrate", default_features = false }
sr-primitives = { git = "https://github.com/chainpool/substrate", default_features = false }
# substrate runtime module
srml-support = { git = "https://github.com/chainpool/substrate", default_features = false }
srml-system = { git = "https://github.com/chainpool/substrate", default_features = false }
# chainx runtime module
xrml-mining-staking = { path = "../xmining/staking", default_features = false }
xrml-mining-tokens = { path = "../xmining/tokens", default_features = false }
xrml-xassets-assets = { path = "../xassets/assets",  default_features = false }
xrml-xaccounts = { path = "../xaccounts",  default_features = false }
xrml-bridge-bitcoin = { path = "../xbridge/bitcoin",  default_features = false }
xrml-xdex-spot = { path = "../xdex/spot", default_features = false }
xrml-xmultisig = { path = "../xmultisig", default_features = false }
# bitcoin
chain = { git = "https://github.com/chainx-org/bitcoin-rust", default-features = false }

[features]
default = ["std"]
std=[
    "serde/std",
    "serde_derive",
    "parity-codec/std",
    "substrate-primitives/std",
    "sr-io/std",
    "sr-primitives/std",
    "srml-support/std",
    "srml-system/std",
    "xrml-mining-staking/std",
    "xrml-mining-tokens/std",
    "xrml-xassets-assets/std",
    "xrml-xaccounts/std",
    "xrml-bridge-bitcoin/std",
    "xrml-xdex-spot/std",
    "xrml-xmultisig/std",
    # bitcoin
    "chain/std"
]
